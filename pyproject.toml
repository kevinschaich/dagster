# ########################
# ##### BLACK
# ########################

# [Docs root]
#   https://black.readthedocs.io/en/stable/
# [Config option reference]
#   https://black.readthedocs.io/en/stable/usage_and_configuration/the_basics.html#command-line-options

[tool.black]
line-length = 100

# Enable "preview" mode-- this adds style rules likely to be incorporated into black's next major
# release. The reason for enabling this, as of 2022-12-04, is to turn on formatting of long string
# literals.
preview = true

# Black will refuse to run if it's not this version.
required-version = "22.12.0"

# Ensure black's output will be compatible with all listed versions.
target-version = ['py37', 'py38', 'py39', 'py310', 'py311']

# ########################
# ##### PYRIGHT
# ########################

# [Docs root]
#   https://github.com/microsoft/pyright/tree/main/docs
# [Config option reference]
#   https://github.com/microsoft/pyright/blob/main/docs/configuration.md

# Pyright does not have a docs site, but the documentation (a collection of
# markdown files in the GH repo, linked above) is pretty thorough.

[tool.pyright]

include = [
  ".buildkite/dagster-buildkite",
  "python_modules",
  "examples",
  "integration_tests",
  "scripts",
]

# Unfortunately pyright does not offer a way to extend the default exclusions, so we have to
# reiterate them here if we want to add anything else.
exclude = [
  "**/node_modules",
  "**/__pycache__",
  "**/__generated__",
  "**/vendor",
  "**/.tox",
  ".git",
  "**/.venv*",

  # These two examples have `dbt-snowflake` as a dependency, which as of 2023-02 causes build
  # problems when used with dagster-snowflake-pandas. They have their own pyright configurations in
  # their respective pyproject.toml files.
  "examples/assets_smoke_test",
  "examples/project_fully_featured",
  "examples/quickstart_aws",
  "examples/quickstart_etl",
  "examples/quickstart_gcp",
  "examples/quickstart_snowflake",

  # Tutorial template contains "stub" code that needs to be filled in by user.
  "examples/tutorial_dbt_dagster/tutorial_template",
]

# These two settings point pyright to a python environment to resolve imports against. This virtual
# environment is defined in the `pyright` tox environment in the tox section below-- that
# environment must be built before pyright can run correctly.
venv = "pyright"
venvPath = "./.tox"

# Set to false to help us during the transition from mypy to pyright. Mypy does
# not analyze unannotated functions by default, and so as of 2023-02 the codebase contains a large
# number of type errors in unannotated functions. Eventually we can turn off this setting.
analyzeUnannotatedFunctions = false

# Minimum version of Python on which code must run. This determines the standard library stubs used by
# pyright.
pythonVersion = "3.7"

# Use "basic" ruleset. This differs from strict in several ways, but most
# importantly it does not flag untyped code as an error.
typeCheckingMode = "basic"

# Disable reading type annotations from libraries that are not explicitly marked as typed (i.e. that
# include a py.typed file). All imports from these libraries are given the `Unknown` type (i.e.
# `Any`). This setting does not affect `py.typed` libraries.
useLibraryCodeForTypes = false

# We use ruff for this.
reportInvalidStringEscapeSequence = false

# As of 2023-02-02, there are still lot of `py.typed` libs that are not compliant with the standards
# for defining a public API.
reportPrivateImportUsage = false

# ########################
# ##### PYTEST
# ########################

[tool.pytest.ini_options]

filterwarnings = [
  "ignore::dagster.ExperimentalWarning",
  "ignore::DeprecationWarning",
  "ignore::UserWarning",
  "ignore::pytest.PytestCollectionWarning",
]

# ########################
# ##### RUFF
# ########################

# [Docs root]
#   https://github.com/charliermarsh/ruff#ruff
# [Config option reference]
#   https://github.com/charliermarsh/ruff#reference
#
# As of 2022-12-05, the entire documentation of Ruff is in its very long
# README.

[tool.ruff]

extend-exclude = [
  "*/__generated__/*",
  "*/dagster_airflow/vendor/*",
  "*/snapshots/*",
]

ignore = [

  # (non-google docstring)  These docstring rules are collectively incompatible
  # with the Google-style docstrings we use. List taken from:
  # https://github.com/charliermarsh/ruff#does-ruff-support-numpy--or-google-style-docstrings
  "D203",
  "D204",
  "D213",
  "D215",
  "D400",
  "D404",
  "D406",
  "D407",
  "D408",
  "D409",
  "D413",

  # (missing public docstrings) These work off of the Python sense of "public", rather than our
  # bespoke definition based off of `@public`. When ruff supports custom plugins then we can write
  # appropriate rules to require docstrings for `@public`.
  "D100",
  "D101",
  "D102",
  "D103",
  "D104",
  "D105",
  "D106",
  "D107",

  # (module level import not at top) There are several places where we use e.g.
  # warnings.filterwarings calls before imports.
  "E402",

  # (line too long): This fires for comments, which black won't wrap.
  # Disabling until there is an autoformat solution available for comments.
  "E501",

  # (no type comparison): There are a few places where we use `== type(None)` which are more clear
  # than the equivalent `isinstance` check.
  'E721',

  # (bare exception): There are many places where we want to catch a maximally generic exception.
  'E722',

  # (no assign lambda): existing code assigns lambdas in a few places. With black formatting
  # requiring extra empty lines between defs, disallowing lambda assignment can make code less
  # readable.
  "E731",

  # (no redundant alias) Allow redundant import aliases for explicit re-exports.
  "PLC0414",

  # (use from for submodule imports) Sometimes it is clearer to import a submodule directly.
  "PLR0402",

  ##### TEMPORARY DISABLES

  # (assorted docstring rules) There are too many violations of these to enable
  # right now, but we should enable after fixing the violations.
  "D200",  # (one-line docstring should fit)
  "D205",  # (blank line after summary)
  "D212",  # (multi-line docstring summary should start at 1st line)
  "D415",  # (docstring summary should end with a period)
  "D417",  # (missing arg in docstring)

  # (indent docstring rules) These rules should be enabled when ruff lands
  # on/off style comments, which would allow turning them off for specific
  # docstrings.
  "D207", # (under-indented docstring)
  "D208", # (over-indented docstring)
  "D402", # (first line should not be the function's "signature")

  # (disallow print statements) Allowing until there are file-scoped error-specific ignores and we
  # can bulk-convert our pylint disables.
  "T201",  # (no print call)
  "T203",  # (no pprint call)

]

# Match black. Note that this also checks comment line length, but black does not format comments.
line-length = 100

# By default, ruff only uses all "E" (pycodestyle) and "F" (pyflakes) rules.
# Here we append to the defaults.
select = [

  # (pydocstyle) Docstring-related rules. See above ignore section for selected
  # exclusions that sculpt the rules to fit Google-style docstrings. See:
  # https://github.com/charliermarsh/ruff#does-ruff-support-numpy--or-google-style-docstrings
  "D",

  # (pycodestyle) use all pycodestyle rules
  "E",

  # (pyflakes) use all pyflakes rules
  "F",

  # (isort) detect improperly sorted imports
  "I001",

  # (pylint) use all pylint rules (ruff currently implements only a subset of
  # pylint's rules)
  "PLC",
  "PLE",
  "PLR",
  "PLW",

  # (no commented out code) keep commented out code blocks out of the codebase
  # "ERA001",

  # (ruff-specific) Enable all ruff-specific checks (i.e. not ports of
  # functionality from an existing linter).
  "RUF",

  # (disallow print statements) keep debugging statements out of the codebase
  "T",

]

# Fail if Ruff is not running this version.
required-version = "0.0.212"

[tool.ruff.isort]

# Combine multiple `from foo import bar as baz` statements with the same source
# (`foo`) into a single statement.
combine-as-imports = true

# Imports of the form `from foo import bar as baz` show one `import bar as baz`
# per line. Useful for __init__.py files that just re-export symbols.
force-wrap-aliases = true

[tool.dagster]
module_name = "dagster_test.toys.repo"

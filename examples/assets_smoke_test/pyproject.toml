# ########################
# ##### PYRIGHT
# ########################

# As of 2022-12-2, this package has a dedicated pyright configuration because its dependencies
# conflict with other dagster packages, preventing it from being installed in a common environment
# with those packages and analyzed within the same pyright run. This section can be removed, and the
# package incorporated into the root pyright environment/config, when these conflicts are resolved.
[tool.pyright]

include = [
  ".",
]

exclude = [
  "**/__pycache__",
  "**/.tox",
  "**/.venv*",
]

# These two settings point pyright to a python environment to resolve imports against. This virtual
# environment is defined in the `pyright` tox environment in the tox section below-- that
# environment must be built before pyright can run correctly.
venv = "pyright"
venvPath = "./.tox"

# ----- SETTINGS COPIED FROM ROOT

# NOTE: The below settings are meant to be kept in common across all pyright configurations. Pyright
# curretnly lacks configuration inheritance, so we must duplicate the settings in every pyright
# configuration file. Do not change these settings without changing them in all other pyright
# configuration files.

# Set to false to help us during the transition from mypy to pyright. Mypy does
# not analyze unannotated functions by default, and so as of 2022-12 the
# codebase contains a large number of type errors in unannotated functions. Eventually we can turn
# off this setting entirely.
analyzeUnannotatedFunctions = false

# Minimum version of Python on which code must run. This determines the standard library stubs used by
# pyright.
pythonVersion = "3.7"

# Use "basic" ruleset. This differs from strict in several ways, but most
# importantly it does not flag untyped code as an error.
typeCheckingMode = "basic"

# Disable reading type annotations from libraries that are not explicitly marked as typed (i.e. that
# include a py.typed file). All imports from these libraries are given the `Unknown` type (i.e.
# `Any`). This setting does not affect `py.typed` libraries.
useLibraryCodeForTypes = false

# We use ruff for this.
reportInvalidStringEscapeSequence = false
